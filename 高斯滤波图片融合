tshift(dft)

    rows, cols = img.shape
    crow, ccol = int(rows / 2), int(cols / 2)  # 计算频谱中心
    mask = np.zeros((rows, cols, 2))  # 生成rows行cols列的二维矩阵

    for i in range(rows):
        for j in range(cols):
            D = np.sqrt((i - crow) ** 2 + (j - ccol) ** 2)  # 计算D(u,v)
            if (filter.lower() == 'butterworth'):  # 巴特沃斯滤波器
                if (type == 'lp'):
                    mask[i, j] = 1 / (1 + (D / D0) ** (2 * N))
                elif (type == 'hp'):
                    mask[i, j] = 1 / (1 + (D0 / D) ** (2 * N))
                else:
                    assert ('type error')
            elif (filter.lower() == 'ideal'):  # 理想滤波器
                if (type == 'lp'):
                    if (D <= D0):
                        mask[i, j] = 1
                elif (type == 'hp'):
                    if (D > D0):
                        mask[i, j] = 1
                else:
                    assert ('type error')
            elif (filter.lower() == 'gaussian'):  # 高斯滤波器
                if (type == 'lp'):
                    mask[i, j] = np.exp(-(D * D) / (2 * D0 * D0))
                elif (type == 'hp'):
                    mask[i, j] = (1 - np.exp(-(D * D) / (2 * D0 * D0)))
                else:
                    assert ('type error')

    fshift = dtf_shift * mask

    f_ishift = np.fft.ifftshift(fshift)
    img_back = cv2.idft(f_ishift)
    img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])  # 计算像素梯度的绝对值
    img_back = np.abs(img_back)
    # img_back = (img_back - np.amin(img_back)) / (np.amax(img_back) - np.amin(img_back))
    return img_back


# 低通滤波器
plt.subplot(221), plt.imshow(cover, cmap='gray'), plt.title('Input')
plt.xticks([]), plt.yticks([])
img_back1 = filter(cover, 200, type='lp', filter='gaussian')  # 截止频率30
plt.subplot(222), plt.imshow(img_back1, cmap='gray'), plt.title('lp_guassian_cover')
plt.xticks([]), plt.yticks([])
img_back2 = filter(message, 500, type='hp', filter='gaussian')
plt.subplot(223), plt.imshow(
    img_back2, cmap='gray'), plt.title('hp_guassian_message')
plt.xticks([]), plt.yticks([])
img_back3 = cv2.addWeighted(img_back1, 0.5, img_back2, 0.5, 0)
plt.subplot(224), plt.imshow(
    img_back3, cmap='gray'), plt.title('Melt_gaussian')
plt.xticks([]), plt.yticks([])
plt.show()
